#These parameters set thresholds on obstacle information put into the costmap. 
#The "obstacle_range" parameter determines the maximum range sensor reading that will result in an obstacle being put into the costmap. 
#Here, we have it set at 2.5 meters, which means that the robot will only update its map with information about obstacles that are within 2.5 meters of the base. 
#The "raytrace_range" parameter determines the range to which we will raytrace freespace given a sensor reading. 
#Setting it to 3.0 meters as we have above means that the robot will attempt to clear out space in front of it up to 3.0 meters away given a sensor reading.
obstacle_range: 5.5
raytrace_range: 6.0

#Here we set either the footprint of the robot or the radius of the robot if it is circular. 
#n the case of specifying the footprint, the center of the robot is assumed to be at (0.0, 0.0) and both clockwise and counterclockwise specifications are supported.
#We'll also set the inflation radius for the costmap. The inflation radius should be set to the maximum distance from obstacles at which a cost should be incurred. 
#For example, setting the inflation radius at 0.55 meters means that the robot will treat all paths that stay 0.55 meters or more away from obstacles as having equal obstacle cost.


robot_base_frame: robot_footprint
update_frequency: 5.0
publish_frequency: 3.0
transform_tolerance: 0.5
#robot_radius: ir_of_robot

#layer definitions

inflation layer:
    enabled: true
    inflation_radius: 0.55
    cost_scaling_factor: 10.0


#layer definitions
static layer:
    enabled: true
    map_topic: map
    subscribe_to_updates: true
    track_unknown_space:  false

#The "observation_sources" parameter defines a list of sensors that are going to be passing information to the costmap separated by spaces. Each sensor is defined in the next lines.
obstacle_layer:
    enabled:              true
    max_obstacle_height:  2.0
    min_obstacle_height:  0.2
    combination_method:   1
    observation_sources:  lidar #point_cloud_sensor
#This line sets parameters on a sensor mentioned in observation_sources, and this example defines laser_scan_sensor as an example. 
#The "frame_name" parameter should be set to the name of the coordinate frame of the sensor, the "data_type" parameter should be set to LaserScan or PointCloud 
#depending on which message the topic uses, and the "topic_name" should be set to the name of the topic that the sensor publishes data on. 
#The "marking" and "clearing" parameters determine whether the sensor will be used to add obstacle information to the costmap, 
#clear obstacle information from the costmap, or do both.
    lidar: {sensor_frame: scan_link, data_type: LaserScan, topic: ipharobotv4/scan, marking: true, clearing: true, inf_is_valid: true}

# point_cloud_sensor: {sensor_frame: frame_name, data_type: PointCloud, topic: topic_name, marking: true, clearing: true}
